// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Command struct {
	Command              string   `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Args                 string   `protobuf:"bytes,2,opt,name=args,proto3" json:"args,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *Command) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Command.Unmarshal(m, b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Command.Marshal(b, m, deterministic)
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return xxx_messageInfo_Command.Size(m)
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *Command) GetArgs() string {
	if m != nil {
		return m.Args
	}
	return ""
}

type Response struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type LogLine struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogLine) Reset()         { *m = LogLine{} }
func (m *LogLine) String() string { return proto.CompactTextString(m) }
func (*LogLine) ProtoMessage()    {}
func (*LogLine) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{2}
}

func (m *LogLine) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogLine.Unmarshal(m, b)
}
func (m *LogLine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogLine.Marshal(b, m, deterministic)
}
func (m *LogLine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogLine.Merge(m, src)
}
func (m *LogLine) XXX_Size() int {
	return xxx_messageInfo_LogLine.Size(m)
}
func (m *LogLine) XXX_DiscardUnknown() {
	xxx_messageInfo_LogLine.DiscardUnknown(m)
}

var xxx_messageInfo_LogLine proto.InternalMessageInfo

func (m *LogLine) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type LogFileLocation struct {
	FileLocation         string   `protobuf:"bytes,1,opt,name=fileLocation,proto3" json:"fileLocation,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogFileLocation) Reset()         { *m = LogFileLocation{} }
func (m *LogFileLocation) String() string { return proto.CompactTextString(m) }
func (*LogFileLocation) ProtoMessage()    {}
func (*LogFileLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{3}
}

func (m *LogFileLocation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogFileLocation.Unmarshal(m, b)
}
func (m *LogFileLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogFileLocation.Marshal(b, m, deterministic)
}
func (m *LogFileLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogFileLocation.Merge(m, src)
}
func (m *LogFileLocation) XXX_Size() int {
	return xxx_messageInfo_LogFileLocation.Size(m)
}
func (m *LogFileLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_LogFileLocation.DiscardUnknown(m)
}

var xxx_messageInfo_LogFileLocation proto.InternalMessageInfo

func (m *LogFileLocation) GetFileLocation() string {
	if m != nil {
		return m.FileLocation
	}
	return ""
}

func init() {
	proto.RegisterType((*Command)(nil), "proto.Command")
	proto.RegisterType((*Response)(nil), "proto.Response")
	proto.RegisterType((*LogLine)(nil), "proto.LogLine")
	proto.RegisterType((*LogFileLocation)(nil), "proto.LogFileLocation")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8f, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x89, 0xd8, 0xae, 0x0e, 0x9a, 0xca, 0x1c, 0x4a, 0xe8, 0x49, 0xe2, 0x45, 0x3c, 0x14,
	0x69, 0x11, 0x2f, 0xbd, 0x09, 0x7a, 0xd9, 0x53, 0x04, 0xef, 0x6b, 0x1c, 0x97, 0x05, 0x93, 0x29,
	0x3b, 0x5b, 0xf5, 0xe7, 0x4b, 0x37, 0xbb, 0xd8, 0xf4, 0x94, 0xf9, 0x1e, 0xef, 0x85, 0xfd, 0xe0,
	0x52, 0xc8, 0x7f, 0xbb, 0x96, 0x96, 0x5b, 0xcf, 0x81, 0x71, 0x12, 0x3f, 0xf5, 0x23, 0xa8, 0x27,
	0xee, 0x3a, 0xd3, 0x7f, 0x60, 0x05, 0xaa, 0x1d, 0xce, 0xaa, 0xb8, 0x2e, 0x6e, 0xcf, 0x9b, 0x8c,
	0x88, 0x70, 0x6a, 0xbc, 0x95, 0xea, 0x24, 0xc6, 0xf1, 0xae, 0x37, 0x70, 0xd6, 0x90, 0x6c, 0xb9,
	0x17, 0xc2, 0x39, 0x4c, 0x25, 0x98, 0xb0, 0x93, 0x38, 0x9c, 0x34, 0x89, 0xf6, 0x7f, 0xec, 0x48,
	0xc4, 0x58, 0x4a, 0xd3, 0x8c, 0xf5, 0x0d, 0x28, 0xcd, 0x56, 0xbb, 0x9e, 0x0e, 0x4b, 0xc5, 0xb8,
	0xf4, 0x00, 0x33, 0xcd, 0xf6, 0xd9, 0x7d, 0x91, 0xe6, 0xd6, 0x04, 0xc7, 0x3d, 0xd6, 0x70, 0xf1,
	0x79, 0xc0, 0x69, 0x31, 0xca, 0x56, 0x1b, 0x28, 0x93, 0xd2, 0xeb, 0x60, 0x8c, 0x77, 0xa0, 0xe8,
	0x97, 0xda, 0x5d, 0x20, 0x2c, 0x07, 0xfd, 0x65, 0x6a, 0x2c, 0x66, 0x89, 0xb3, 0xcb, 0xea, 0x05,
	0xae, 0x34, 0xdb, 0x37, 0x47, 0x3f, 0xe4, 0xf3, 0x7e, 0x0d, 0xca, 0x52, 0xd0, 0x6c, 0x05, 0xe7,
	0xa9, 0x7f, 0xf4, 0xb0, 0x45, 0xf9, 0x9f, 0xef, 0xad, 0xee, 0x8b, 0xf7, 0x69, 0x0c, 0xd6, 0x7f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x6a, 0x8a, 0x65, 0x72, 0x78, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CommandServiceClient is the client API for CommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommandServiceClient interface {
	Execute(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error)
}

type commandServiceClient struct {
	cc *grpc.ClientConn
}

func NewCommandServiceClient(cc *grpc.ClientConn) CommandServiceClient {
	return &commandServiceClient{cc}
}

func (c *commandServiceClient) Execute(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/proto.CommandService/execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommandServiceServer is the server API for CommandService service.
type CommandServiceServer interface {
	Execute(context.Context, *Command) (*Response, error)
}

// UnimplementedCommandServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCommandServiceServer struct {
}

func (*UnimplementedCommandServiceServer) Execute(ctx context.Context, req *Command) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}

func RegisterCommandServiceServer(s *grpc.Server, srv CommandServiceServer) {
	s.RegisterService(&_CommandService_serviceDesc, srv)
}

func _CommandService_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServiceServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CommandService/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServiceServer).Execute(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommandService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CommandService",
	HandlerType: (*CommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "execute",
			Handler:    _CommandService_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

// LogViewerServiceClient is the client API for LogViewerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogViewerServiceClient interface {
	GetLogs(ctx context.Context, in *LogFileLocation, opts ...grpc.CallOption) (LogViewerService_GetLogsClient, error)
}

type logViewerServiceClient struct {
	cc *grpc.ClientConn
}

func NewLogViewerServiceClient(cc *grpc.ClientConn) LogViewerServiceClient {
	return &logViewerServiceClient{cc}
}

func (c *logViewerServiceClient) GetLogs(ctx context.Context, in *LogFileLocation, opts ...grpc.CallOption) (LogViewerService_GetLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LogViewerService_serviceDesc.Streams[0], "/proto.LogViewerService/getLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &logViewerServiceGetLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LogViewerService_GetLogsClient interface {
	Recv() (*LogLine, error)
	grpc.ClientStream
}

type logViewerServiceGetLogsClient struct {
	grpc.ClientStream
}

func (x *logViewerServiceGetLogsClient) Recv() (*LogLine, error) {
	m := new(LogLine)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogViewerServiceServer is the server API for LogViewerService service.
type LogViewerServiceServer interface {
	GetLogs(*LogFileLocation, LogViewerService_GetLogsServer) error
}

// UnimplementedLogViewerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLogViewerServiceServer struct {
}

func (*UnimplementedLogViewerServiceServer) GetLogs(req *LogFileLocation, srv LogViewerService_GetLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}

func RegisterLogViewerServiceServer(s *grpc.Server, srv LogViewerServiceServer) {
	s.RegisterService(&_LogViewerService_serviceDesc, srv)
}

func _LogViewerService_GetLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogFileLocation)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogViewerServiceServer).GetLogs(m, &logViewerServiceGetLogsServer{stream})
}

type LogViewerService_GetLogsServer interface {
	Send(*LogLine) error
	grpc.ServerStream
}

type logViewerServiceGetLogsServer struct {
	grpc.ServerStream
}

func (x *logViewerServiceGetLogsServer) Send(m *LogLine) error {
	return x.ServerStream.SendMsg(m)
}

var _LogViewerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LogViewerService",
	HandlerType: (*LogViewerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getLogs",
			Handler:       _LogViewerService_GetLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
